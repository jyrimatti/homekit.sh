#! /usr/bin/env nix-shell
#! nix-shell -i dash -I channel:nixos-24.11-small -p dash nix jq yq yajsv findutils ncurses
. ./prelude
set -eu

logger_info 'Invoked api/characteristics'
logger_trace 'api/characteristics'

. ./util/cache_toml.sh

resource_is_busy_try_again=-70403

if [ "$REQUEST_METHOD" = "GET" ]; then
    logger_debug 'Request is a GET'
    . ./util/cgi_helpers.sh

    meta="${qs_meta:-0}"
    perms="${qs_perms:-0}"
    type="${qs_type:-0}"
    ev="${qs_ev:-0}"

    ids="$(echo "${qs_id}" | tr ',' '\n')"
    set +e
    characteristics="$(echo "$ids" \
        | timeout -v --kill-after=0.5 "$HOMEKIT_SH_CHARACTERISTICS_TIMEOUT" ./bin/rust-parallel-"$(uname)" --jobs "${PROFILING:-$(echo "$ids" | wc -l)}" --shell-path dash dash ./util/characteristics_get.sh "$meta" "$perms" "$type" "$ev")"
    responseValue=$?
    set -e
    if [ "$responseValue" -eq 124 ]; then
        logger_error "/characteristics GET timed out! Returning error for all characteristics."
        characteristics="$(echo "$ids" | {
            while read -r id; do
                aid="${id%%.*}"
                iid="${id##*.}"
                echo "{ \"aid\": $aid, \"iid\": $iid, \"status\": $resource_is_busy_try_again }"
            done
        })"
    fi
fi

if [ "$REQUEST_METHOD" = 'PUT' ]; then
    logger_debug 'Request is a PUT'
    set +e
    body="$(cat)"
    characteristics="$(echo "$body"\
        | jq -rc '.characteristics | .[] | [.aid, .iid, .value, .ev, .authData, .remote // false, .r // false] | @sh' \
        | timeout -v --kill-after=0.5 "$HOMEKIT_SH_CHARACTERISTICS_TIMEOUT" ./bin/rust-parallel-"$(uname)" --jobs "${PROFILING:-99}" --shell-path dash dash ./util/characteristics_put.sh)"
    responseValue=$?
    set -e
    if [ "$responseValue" -eq 124 ]; then 
        logger_error "/characteristics PUT timed out! Returning error for all characteristics."
        characteristics="$(echo "$body" | jq -rc ".characteristics | .[] | {aid, iid, status: $resource_is_busy_try_again }")"
    fi

fi

has_errors="$(echo "$characteristics" | jq -r 'select(.status // 0 != 0) | .status')"
if [ "$has_errors" != "" ]; then
    logger_debug "There were errors: $characteristics"
    content="$(echo "$characteristics" | jq -sc '{ characteristics: map(.status = (if .value then 0 else .status end)) }')" || {
        logger_error "Failed to generate response from: $characteristics"
        cat
    }
    dash ./util/respond.sh 207 "$content"
elif [ "$REQUEST_METHOD" = 'GET' ]; then
    content="$(echo "$characteristics" | jq -sc '{ characteristics: . }')"
    dash ./util/respond.sh 200 "$content"
elif [ "$REQUEST_METHOD" = 'PUT' ]; then
    dash ./util/respond.sh 204
fi
